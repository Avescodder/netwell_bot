from telegram import Update
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

from config import BOT_TOKEN
from logging_config import setup_logging, log_startup_info, log_shutdown_info
from handlers import (
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    start, handle_start_button, menu, button_callback,
    waiting_name, waiting_company, waiting_phone, waiting_email,
    search_vendor, cancel, handle_text_message,
    start_vendor_search, handle_profile_edit,
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
    WAITING_NAME, WAITING_COMPANY, WAITING_PHONE, WAITING_EMAIL,
    ADMIN_SEND_MESSAGE, ADMIN_UPDATE_VENDOR, VENDOR_SEARCH,
    ADMIN_SELECT_USERS, ADMIN_MESSAGE_CONTENT,
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    admin_users, admin_stats, admin_send_start, admin_send_message,
    admin_update_vendor_start, admin_update_vendor,
    admin_select_recipients, admin_process_user_ids
)

logger = setup_logging()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {context.error}", exc_info=context.error)
    
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ========== CONVERSATION HANDLERS ==========
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Regex(r'^üöÄ –°–¢–ê–†–¢$'), handle_start_button)
        ],
        states={
            WAITING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, waiting_name)],
            WAITING_COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, waiting_company)],
            WAITING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, waiting_phone)],
            WAITING_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, waiting_email)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        name="registration"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤–µ–Ω–¥–æ—Ä–æ–≤
    vendor_search_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r'^üîç –ü–æ–∏—Å–∫ –≤–µ–Ω–¥–æ—Ä–æ–≤$'), start_vendor_search)
        ],
        states={
            VENDOR_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_vendor)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        name="vendor_search"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    admin_broadcast_handler = ConversationHandler(
        entry_points=[
            CommandHandler('send', admin_send_start),
            MessageHandler(filters.Regex(r'^üìö –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É$'), admin_send_start)
        ],
        states={
            ADMIN_SELECT_USERS: [
                CallbackQueryHandler(admin_select_recipients, pattern=r'^broadcast_'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_process_user_ids)
            ],
            ADMIN_MESSAGE_CONTENT: [
                MessageHandler(
                    (filters.TEXT | filters.PHOTO | filters.Document.ALL | filters.VIDEO) & ~filters.COMMAND,
                    admin_send_message
                )
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        name="admin_broadcast"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–æ—Ä–æ–≤
    admin_vendor_handler = ConversationHandler(
        entry_points=[
            CommandHandler('update_vendor', admin_update_vendor_start),
            MessageHandler(filters.Regex(r'^üõ† –ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ$'), admin_update_vendor_start)
        ],
        states={
            ADMIN_UPDATE_VENDOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_update_vendor)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        name="admin_vendor_update"
    )
    
    # ========== –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
    
    # Conversation handlers (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏)
    application.add_handler(registration_handler)
    application.add_handler(vendor_search_handler)
    application.add_handler(admin_broadcast_handler)
    application.add_handler(admin_vendor_handler)
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('menu', menu))
    application.add_handler(CommandHandler('users', admin_users))
    application.add_handler(CommandHandler('stats', admin_stats))
    application.add_handler(CommandHandler('cancel', cancel))
    
    # Callback –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
    
    log_startup_info()
    
    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        log_shutdown_info()
    except Exception as e:
        logger.critical(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        raise