import requests
import csv
from io import StringIO
from db import db, Vendor
from config import TABLE_DIRECTIONS_SHEET_ID as SHEET_ID

SHEET_TABS = {
    "C–•–î": "0",
    "–ò–ë": "1402009523",
    "–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": "522772291",
    "–°–µ—Ç–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è": "832184783",
    "–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏": "228991952",
}

def parse_sheet_tab(tab_name, gid):
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É Google Sheets"""
    csv_url = f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/export?format=csv&gid={gid}"
    
    try:
        response = requests.get(csv_url)
        response.raise_for_status()
        
        content = response.content.decode('utf-8-sig')
        data = StringIO(content)
        lines = list(csv.reader(data))
        
        if len(lines) < 2:
            return []
        
        headers = lines[0]
        data_rows = lines[1:]
        
        vendors = []
        for row in data_rows:
            if len(row) < 2: 
                continue
            
            if len(row) < len(headers):
                row.extend([''] * (len(headers) - len(row)))
            
            vendor_name = row[0].strip()
            
            if not vendor_name:
                continue
            
            row_dict = dict(zip(headers, row))
            
            vendor_data = {
                'name': vendor_name,
                'direction': tab_name,
                'priority': row_dict.get('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏', '').strip() or None,
                'origin': row_dict.get('–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞', '').strip() or None,
                'categories': row_dict.get('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', '').strip() or None,
                'key_products': row_dict.get('–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '').strip() or None,
                'target_customers': row_dict.get('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∏ (—Å–µ–∫—Ç–æ—Ä)', '').strip() or None,
                'advantages': row_dict.get('–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', '').strip() or None,
                'software_registry': row_dict.get('–í–∫–ª—é—á–µ–Ω—ã –ª–∏ –≤ —Ä–µ–µ—Å—Ç—Ä –ü–û / –§–°–¢–≠–ö / –§–°–ë', '').strip() or None,
                'fstek': row_dict.get('–§–°–¢–≠–ö', '').strip() or None,
                'fsb': row_dict.get('–§–°–ë', '').strip() or None,
                'decision_makers': row_dict.get('–õ–ü–†', '').strip() or None,
                'main_competitors': row_dict.get('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã', '').strip() or None,
                'foreign_replacement': row_dict.get('–ó–∞–º–µ–Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π', '').strip() or None,
                'service': row_dict.get('–°–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '').strip() or None,
                'partner_program': row_dict.get('–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å, –∫–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è)', '').strip() or None,
                'partner_requirements': row_dict.get('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º', '').strip() or None,
                'partner_benefits': row_dict.get('–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', '').strip() or None,
                'sales_recommendations': row_dict.get('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', '').strip() or row_dict.get('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:', '').strip() or None,
                'certified_engineers': row_dict.get('–ù–∞–ª–∏—á–∏–µ –Ω–∞—à–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤', '').strip() or None,
                'warehouse_availability': row_dict.get('–ù–∞–ª–∏—á–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ –ù–µ—Ç–≤–µ–ª–ª', '').strip() or None,
                'service_provided': row_dict.get('–û–∫–∞–∑—ã–≤–∞–µ–º –ª–∏ —Å–µ—Ä–≤–∏—Å –ø–æ –≤–µ–Ω–¥–æ—Ä—É?', '').strip() or None,
                'vendor_on_our_site': row_dict.get('–ù–∞–ª–∏—á–∏–µ –≤–µ–Ω–¥–æ—Ä–∞ —É –Ω–∞—Å –Ω–∞ —Å–∞–π—Ç–µ', '').strip() or None,
                'netwell_on_vendor_site': row_dict.get('–ù–∞–ª–∏—á–∏–µ –ù–µ—Ç–≤–µ–ª–ª –Ω–∞ —Å–∞–π—Ç–µ –≤–µ–Ω–¥–æ—Ä–∞', '').strip() or None,
            }
            
            founded_year = row_dict.get('–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è', '').strip()
            if founded_year:
                try:
                    vendor_data['founded_year'] = int(founded_year)
                except:
                    vendor_data['founded_year'] = None
            else:
                vendor_data['founded_year'] = None
            
            if vendor_data.get('categories'):
                vendor_data['description'] = vendor_data['categories'][:200]
            else:
                vendor_data['description'] = None
            
            vendors.append(vendor_data)
        
        return vendors
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∫–ª–∞–¥–∫–∏ '{tab_name}': {e}")
        import traceback
        traceback.print_exc()
        return []

def add_vendors_from_sheet():
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ Google Sheets...\n")
    
    total_added = 0
    total_updated = 0
    
    for tab_name, gid in SHEET_TABS.items():
        print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É: {tab_name}")
        vendors = parse_sheet_tab(tab_name, gid)
        
        if not vendors:
            print(f"  ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n")
            continue
        
        print(f"  –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(vendors)}")
        
        added = 0
        updated = 0
        
        for vendor_data in vendors:
            try:
                existing = db.session.query(Vendor).filter_by(name=vendor_data['name']).first()
                
                vendor = db.add_vendor(**vendor_data)
                
                if existing:
                    updated += 1
                else:
                    added += 1
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {vendor_data['name']} - {e}")
                db.session.rollback()
        
        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}, üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n")
        
        total_added += added
        total_updated += updated
    
    print(f"{'='*50}")
    print(f"üéâ –ò–¢–û–ì–û:")
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {total_added}")
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated}")
    print(f"{'='*50}")

if __name__ == '__main__':
    add_vendors_from_sheet()