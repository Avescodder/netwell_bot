import os
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from db import db, VendorDirection
from config import ADMIN_IDS, MESSAGES, DIRECTIONS, MANAGERS_CONTACTS, PRODUCT_PORTFOLIO_PATH, GUIDELINE_PATH, LOGOS_URL, MARKETING_PRESENTATION_LINK

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_NAME, WAITING_COMPANY, WAITING_PHONE, WAITING_EMAIL = range(4)
EDIT_NAME, EDIT_COMPANY, EDIT_PHONE, EDIT_EMAIL = range(4, 8)
ADMIN_SEND_MESSAGE, ADMIN_UPDATE_VENDOR = range(8, 10)
VENDOR_SEARCH = 10
ADMIN_SELECT_USERS, ADMIN_MESSAGE_CONTENT = range(11, 13)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    status = is_admin(user_id=user.id)
    
    db_user = db.add_user(user.id, user.username, user.first_name, user.last_name)
    db.log_user_action(user.id, 'start_command')
    
    if db_user.full_name and db_user.company:
        await show_main_menu(update, context)
        return ConversationHandler.END
    
    elif status:
        await admin_menu_main(update, context)
        return ConversationHandler.END

    keyboard = [['üöÄ –°–¢–ê–†–¢']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        MESSAGES['welcome'],
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –°–¢–ê–†–¢"""
    if update.message.text == 'üöÄ –°–¢–ê–†–¢':
        await update.message.reply_text(
            MESSAGES['form_intro'],
            reply_markup=ReplyKeyboardRemove()
        )
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        return WAITING_NAME
    return ConversationHandler.END

async def admin_menu_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = [
        ['üè¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'],
        ['üìö –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'üõ† –ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ'],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

async def waiting_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏"""
    context.user_data['full_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    return WAITING_COMPANY

async def waiting_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    context.user_data['company'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return WAITING_PHONE

async def waiting_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return WAITING_EMAIL

async def waiting_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ email –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    db.update_user_profile(
        user_id,
        full_name=context.user_data['full_name'],
        company=context.user_data['company'],
        phone=context.user_data['phone'],
        email=update.message.text
    )
    
    db.log_user_action(user_id, 'profile_completed')
    
    await update.message.reply_text(MESSAGES['form_complete'])
    await show_main_menu(update, context)
    
    return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        ['üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏', 'üîç –ü–æ–∏—Å–∫ –≤–µ–Ω–¥–æ—Ä–æ–≤'],
        ['üìö –ò–∑—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
        ['üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'],
        ['üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'main_menu_viewed')

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await show_main_menu(update, context)

async def handle_company_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–û –∫–æ–º–ø–∞–Ω–∏–∏'"""
    keyboard = [
        [InlineKeyboardButton("üìÑ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="product_portfolio")],
        [InlineKeyboardButton("üìã –ì–∞–π–¥–ª–∞–π–Ω", callback_data="guideline")],
        [InlineKeyboardButton("üé® –õ–æ–≥–æ—Ç–∏–ø—ã", callback_data="logos")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª:",
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'company_info_viewed')

async def handle_directions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–ò–∑—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'"""
    try:
        keyboard = []
        for i in range(0, len(DIRECTIONS), 2):
            row = []
            direction1 = DIRECTIONS[i]
            row.append(InlineKeyboardButton(direction1, callback_data=f"dir_{i}"))
            if i + 1 < len(DIRECTIONS):
                direction2 = DIRECTIONS[i + 1]
                row.append(InlineKeyboardButton(direction2, callback_data=f"dir_{i + 1}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=reply_markup
        )
        db.log_user_action(update.effective_user.id, 'directions_viewed')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_directions: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await show_main_menu(update, context)

async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'"""
    keyboard = [
        [InlineKeyboardButton("üíæ –°–•–î", callback_data="support_storage")],
        [InlineKeyboardButton("üñ• –°–µ—Ä–≤–µ—Ä—ã", callback_data="support_servers")],
        [InlineKeyboardButton("üîí Fortinet", callback_data="support_fortinet")],
        [InlineKeyboardButton("üõ° Palo Alto", callback_data="support_palo_alto")],
        [InlineKeyboardButton("üì¶ NetApp", callback_data="support_netapp")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        MESSAGES['support_intro'],
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'support_viewed')

async def handle_marketing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'"""
    keyboard = [
        [InlineKeyboardButton("üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="marketing_presentation")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="marketing_contacts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'marketing_viewed')

async def handle_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'"""
    keyboard = []
    for i in range(0, len(DIRECTIONS), 2):
        row = []
        row.append(InlineKeyboardButton(DIRECTIONS[i], callback_data=f"req_{i}"))
        if i + 1 < len(DIRECTIONS):
            row.append(InlineKeyboardButton(DIRECTIONS[i + 1], callback_data=f"req_{i + 1}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        MESSAGES['request_intro'],
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'request_viewed')

async def start_vendor_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –≤–µ–Ω–¥–æ—Ä–∞"""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    db.log_user_action(update.effective_user.id, 'vendor_search_started')
    return VENDOR_SEARCH

async def search_vendor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –≤–µ–Ω–¥–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    vendor_name = update.message.text
    vendor = db.get_vendor(vendor_name)
    
    if vendor:
        card_text = vendor.to_card_text()
        if len(card_text) > 4000:
            card_text = card_text[:4000] + "..."
        
        await update.message.reply_text(
            card_text,
            parse_mode=ParseMode.MARKDOWN
        )
        db.log_user_action(update.effective_user.id, 'vendor_found', vendor.name)
    else:
        await update.message.reply_text(
            f"–í–µ–Ω–¥–æ—Ä '{vendor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        db.log_user_action(update.effective_user.id, 'vendor_not_found', vendor_name)
    
    await show_main_menu(update, context)
    return ConversationHandler.END

async def handle_profile_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    profile_text = f"üìã **–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:**\n\n"
    profile_text += f"üë§ **–ò–º—è:** {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {user.company or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
    profile_text += f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"üìß **Email:** {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
    profile_text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    keyboard = [
        [InlineKeyboardButton("üë§ –ò–º—è –∏ –§–∞–º–∏–ª–∏—è", callback_data="edit_name")],
        [InlineKeyboardButton("üè¢ –ö–æ–º–ø–∞–Ω–∏—è", callback_data="edit_company")],
        [InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton("üìß Email", callback_data="edit_email")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        profile_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'profile_edit_viewed')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    try:
        if data == "back_to_menu":
            await query.message.delete()
            await show_main_menu_callback(query, context)
        
        elif data == "product_portfolio":
            await send_file(query, PRODUCT_PORTFOLIO_PATH, "–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
            db.log_user_action(user_id, 'file_downloaded', 'product_portfolio')
        
        elif data == "guideline":
            await send_file(query, GUIDELINE_PATH, "–ì–∞–π–¥–ª–∞–π–Ω")
            db.log_user_action(user_id, 'file_downloaded', 'guideline')
        
        elif data == "logos":
            await query.edit_message_text(
                f"–õ–æ–≥–æ—Ç–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: {LOGOS_URL}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
            db.log_user_action(user_id, 'logos_viewed')
        
        elif data.startswith("dir_"):
            dir_index = int(data.replace("dir_", ""))
            direction = DIRECTIONS[dir_index]
            await show_vendors_by_direction(query, context, direction)
            db.log_user_action(user_id, 'direction_viewed', direction)
        
        elif data.startswith("vendor_"):
            vendor_id = int(data.replace("vendor_", ""))
            vendor = db.get_vendor_by_id(vendor_id)
            if vendor:
                card_text = vendor.to_card_text()
                if len(card_text) > 4000:
                    card_text = card_text[:4000] + "..."
                
                try:
                    dir_index = DIRECTIONS.index(vendor.direction)
                    back_callback = f"dir_{dir_index}"
                except ValueError:
                    back_callback = "back_to_menu"
                
                await query.edit_message_text(
                    card_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                    ]])
                )
                db.log_user_action(user_id, 'vendor_card_viewed', vendor.name)
            else:
                await query.edit_message_text(
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
                    ]])
                )

        elif data.startswith("vdir_"):
            vendor_id = int(data.replace("vdir_", ""))
            vendor = db.session.query(VendorDirection).filter_by(id=vendor_id).first()
            if vendor:
                card_text = vendor.to_card_text()
                await query.edit_message_text(
                    card_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"dir_{DIRECTIONS.index(vendor.direction)}")
                    ]])
                )
        
        elif data.startswith("req_"):
            dir_index = int(data.replace("req_", ""))
            direction = DIRECTIONS[dir_index]
            contact = MANAGERS_CONTACTS.get(direction, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await query.edit_message_text(
                f"**{direction}**\n\n{contact}",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
            db.log_user_action(user_id, 'manager_contact_viewed', direction)
        
        elif data == "marketing_presentation":
            await query.edit_message_text(
                f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {MARKETING_PRESENTATION_LINK}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
            db.log_user_action(user_id, 'presentation_viewed')
        
        elif data == "marketing_contacts":
            await query.edit_message_text(
                MESSAGES['marketing_contacts'],
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
            db.log_user_action(user_id, 'marketing_contacts_viewed')
        
        elif data.startswith("support_"):
            support_type = data.replace("support_", "")
            await show_support_info(query, context, support_type)
            db.log_user_action(user_id, 'support_info_viewed', support_type)
        
        elif data == "edit_name":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
            context.user_data['editing_field'] = 'full_name'
            
        elif data == "edit_company":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
            context.user_data['editing_field'] = 'company'
            
        elif data == "edit_phone":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            context.user_data['editing_field'] = 'phone'
            
        elif data == "edit_email":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
            context.user_data['editing_field'] = 'email'
    
    except Exception as e:
        logger.error(f"Error in button_callback: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
            ]])
        )

async def show_main_menu_callback(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    keyboard = [
        ['üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏', 'üîç –ü–æ–∏—Å–∫ –≤–µ–Ω–¥–æ—Ä–æ–≤'],
        ['üìö –ò–∑—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
        ['üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'],
        ['üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

async def show_vendors_by_direction(query, context: ContextTypes.DEFAULT_TYPE, direction: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ–Ω–¥–æ—Ä–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (–∏–∑ –ù–û–í–û–ô —Ç–∞–±–ª–∏—Ü—ã)"""
    try:
        vendors = db.get_vendors_by_direction_new(direction)
        
        if not vendors:
            await query.edit_message_text(
                f"–ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{direction}' –≤–µ–Ω–¥–æ—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
            return
        
        text = f"üìÇ **{direction}**\n\n"
        text += "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ—à–µ–Ω–∏—è –≤–µ–Ω–¥–æ—Ä–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–µ–Ω–¥–æ—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        keyboard = []
        for vendor in vendors[:20]:
            keyboard.append([InlineKeyboardButton(
                f"üè¢ {vendor.vendor_name}", 
                callback_data=f"vdir_{vendor.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data="back_to_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_vendors_by_direction: {e}", exc_info=True)

async def show_support_info(query, context: ContextTypes.DEFAULT_TYPE, support_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    support_texts = {
        'storage': """**–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –°–•–î**

**–í–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É/email
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –í—ã–µ–∑–¥ –∏–Ω–∂–µ–Ω–µ—Ä–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
‚Ä¢ –ó–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
üî¥ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1** (2 —á–∞—Å–∞) - –ü–æ–ª–Ω–∞—è –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –°–•–î
üü° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2** (4 —á–∞—Å–∞) - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
üü¢ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3** (24 —á–∞—Å–∞) - –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
üîµ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4** (48 —á–∞—Å–æ–≤) - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏""",
        
        'servers': """**–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤**

**–í–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É/email
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –í—ã–µ–∑–¥ –∏–Ω–∂–µ–Ω–µ—Ä–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ó–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
üî¥ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1** (2 —á–∞—Å–∞) - –°–µ—Ä–≤–µ—Ä –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω
üü° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2** (4 —á–∞—Å–∞) - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
üü¢ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3** (24 —á–∞—Å–∞) - –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã""",
        
        'fortinet': """**–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Fortinet**

**–í–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ 24x7
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–æ—Ç–¥–µ–ª—å–Ω–æ)

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
üî¥ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1** (6 —á–∞—Å–æ–≤) - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å
üü° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2** (24 —á–∞—Å–∞) - –ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
üü¢ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3** (72 —á–∞—Å–∞) - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏""",
        
        'palo_alto': """**–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Palo Alto Networks**

**–í–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª/—Ç–µ–ª–µ—Ñ–æ–Ω
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞–º–∏ –¥–ª—è NGFW
‚Ä¢ –ó–∞–º–µ–Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π (RMA)
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü–û –∏ –ø–æ–¥–ø–∏—Å–æ–∫

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
üî¥ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1** (<1 —á–∞—Å) - –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
üü° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2** (<4 —á–∞—Å–∞) - –ó–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã
üü¢ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3** (<8 —á–∞—Å–æ–≤) - –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
üîµ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4** (<16 —á–∞—Å–æ–≤) - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏""",
        
        'netapp': """**–°–∫–ª–∞–¥—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ NetApp**

**–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (HDD):**
‚Ä¢ Entry level FAS 2750
‚Ä¢ Middle FAS 8300
‚Ä¢ Enterprise FAS 9000

**ALL FLASH FAS (SSD):**
‚Ä¢ All flash –ê150, –ê250, –ê400
‚Ä¢ NVME –ê700, –ê800
‚Ä¢ C800, C250

**All SAN Array:**
‚Ä¢ ASA A150, A250
‚Ä¢ ASA A400, A700"""
    }
    
    text = support_texts.get(support_type, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]])
    )

async def send_file(query, file_path: str, file_description: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if os.path.exists(file_path):
            with open(file_path, 'rb') as file:
                await query.message.reply_document(
                    document=file,
                    caption=file_description
                )
        else:
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            await query.edit_message_text(
                f"–§–∞–π–ª '{file_description}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}", exc_info=True)
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if 'editing_field' in context.user_data:
        field = context.user_data['editing_field']
        new_value = text.strip()
        
        update_data = {field: new_value}
        db.update_user_profile(user_id, **update_data)
        db.log_user_action(user_id, f'profile_{field}_updated', new_value)
        
        del context.user_data['editing_field']
        
        field_names = {
            'full_name': '–ò–º—è',
            'company': '–ö–æ–º–ø–∞–Ω–∏—è', 
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'email': 'Email'
        }
        field_name = field_names.get(field, field)
        
        await update.message.reply_text(f"‚úÖ {field_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_value}")
        await show_main_menu(update, context)
        return
    
    menu_handlers = {
        'üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏': handle_company_info,
        'üîç –ü–æ–∏—Å–∫ –≤–µ–Ω–¥–æ—Ä–æ–≤': start_vendor_search,
        'üìö –ò–∑—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è': handle_directions,
        'üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞': handle_support,
        'üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': handle_marketing,
        'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å': handle_request,
        'üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É': handle_profile_edit,
    }
    
    if is_admin(user_id):
        admin_handlers = {
            'üè¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': admin_users,
            'üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É': admin_stats,
            'üìö –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É': admin_send_start,
            'üõ† –ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ': admin_update_vendor_start,
        }
        
        if text in admin_handlers:
            return await admin_handlers[text](update, context)
    
    if text in menu_handlers:
        return await menu_handlers[text](update, context)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu"
    )
    
    return ConversationHandler.END

# =================== –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ===================

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    users = db.get_all_users()
    
    if not users:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    text = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)} —á–µ–ª.):**\n\n"
    for user in users[:20]:
        text += f"**ID:** {user.user_id}\n"
        text += f"**–ò–º—è:** {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"**–ö–æ–º–ø–∞–Ω–∏—è:** {user.company or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"**Email:** {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"**–î–∞—Ç–∞:** {user.registration_date.strftime('%d.%m.%Y') if user.registration_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    
    if len(users) > 20:
        text += f"\n... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        stats = db.get_user_stats()
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n\n"
        
        if stats['popular_actions']:
            text += "üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
            for action, count in sorted(stats['popular_actions'].items(), key=lambda x: x[1], reverse=True)[:10]:
                clean_action = str(action).replace('*', '').replace('_', '').replace('`', '')
                text += f"‚Ä¢ {clean_action}: {count}\n"
        else:
            text += "üìà –î–µ–π—Å—Ç–≤–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        await update.message.reply_text(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
        )

async def admin_send_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ - –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞—Ç–æ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END
    
    users = db.get_all_users()
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all")],
        [InlineKeyboardButton("üë§ –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="broadcast_select")],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üì® **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )
    
    return ADMIN_SELECT_USERS

async def admin_select_recipients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "broadcast_all":
        users = db.get_all_users()
        context.user_data['broadcast_recipients'] = [u.user_id for u in users]
        
        await query.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)} —á–µ–ª.)\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç + —Ñ–æ—Ç–æ\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç + –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return ADMIN_MESSAGE_CONTENT
    
    elif query.data == "broadcast_select":
        users = db.get_all_users()
        
        text = "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
        text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        
        for user in users[:30]:
            name = user.full_name or user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            company = f" ({user.company})" if user.company else ""
            text += f"‚Ä¢ ID {user.user_id}: {name}{company}\n"
        
        if len(users) > 30:
            text += f"\n... –∏ –µ—â–µ {len(users) - 30} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        text += "\n\n**–ü—Ä–∏–º–µ—Ä:** 123456789, 987654321"
        
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
        return ADMIN_SELECT_USERS
    
    elif query.data == "broadcast_cancel":
        await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await admin_menu_main_from_query(query, context)
        return ConversationHandler.END

async def admin_process_user_ids(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_ids_text = update.message.text.strip()
        user_ids = [int(uid.strip()) for uid in user_ids_text.split(',')]
        
        valid_ids = []
        for uid in user_ids:
            if db.get_user(uid):
                valid_ids.append(uid)
        
        if not valid_ids:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ ID.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
            )
            return ADMIN_SELECT_USERS
        
        context.user_data['broadcast_recipients'] = valid_ids
        
        await update.message.reply_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(valid_ids)}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç + —Ñ–æ—Ç–æ\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç + –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return ADMIN_MESSAGE_CONTENT
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
            "–ü—Ä–∏–º–µ—Ä: 123456789, 987654321\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
        )
        return ADMIN_SELECT_USERS

async def admin_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    recipients = context.user_data.get('broadcast_recipients', [])
    
    if not recipients:
        await update.message.reply_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏")
        return ConversationHandler.END
    
    message = update.message
    success_count = 0
    error_count = 0
    
    await update.message.reply_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {len(recipients)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    for user_id in recipients:
        try:
            if message.photo:
                photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=photo.file_id,
                    caption=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ Netwell:**\n\n{message.caption or ''}",
                    parse_mode=ParseMode.MARKDOWN
                )
            elif message.document:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=message.document.file_id,
                    caption=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ Netwell:**\n\n{message.caption or ''}",
                    parse_mode=ParseMode.MARKDOWN
                )
            elif message.video:
                await context.bot.send_video(
                    chat_id=user_id,
                    video=message.video.file_id,
                    caption=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ Netwell:**\n\n{message.caption or ''}",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ Netwell:**\n\n{message.text}",
                    parse_mode=ParseMode.MARKDOWN
                )
            success_count += 1
        except Exception as e:
            error_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await update.message.reply_text(
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"–û—à–∏–±–æ–∫: {error_count}"
    )
    
    logger.warning(f"üì® –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
    
    db.log_user_action(
        update.effective_user.id, 
        'admin_broadcast', 
        f'sent to {success_count}/{len(recipients)} users'
    )
    
    context.user_data.pop('broadcast_recipients', None)
    
    await admin_menu_main(update, context)
    return ConversationHandler.END

async def admin_update_vendor_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets...")
    
    try:
        from sample_vendors import add_vendors_from_sheet
        from import_directions import import_vendor_directions
        import io
        import sys
        
        old_stdout = sys.stdout
        sys.stdout = buffer = io.StringIO()
        
        import_vendor_directions()
        add_vendors_from_sheet()
        
        output = buffer.getvalue()
        sys.stdout = old_stdout
        
        await update.message.reply_text(
            f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n```\n{output[-1000:]}\n```",
            parse_mode=ParseMode.MARKDOWN
        )
        
        logger.warning(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ–Ω–¥–æ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
        
    await admin_menu_main(update, context)
    return ConversationHandler.END

async def admin_menu_main_from_query(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    keyboard = [
        ['üè¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'],
        ['üìö –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'üõ† –ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ'],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    context.user_data.pop('broadcast_recipients', None)
    context.user_data.pop('editing_field', None)
    
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    if is_admin(update.effective_user.id):
        await admin_menu_main(update, context)
    else:
        await show_main_menu(update, context)
    
    return ConversationHandler.END