"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ Netwell
"""

import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from db import db
from config import ADMIN_IDS, MESSAGES, DIRECTIONS, MANAGERS_CONTACTS, PRODUCT_PORTFOLIO_PATH, GUIDELINE_PATH, LOGOS_URL, MARKETING_PRESENTATION_PATH

WAITING_NAME, WAITING_COMPANY, WAITING_PHONE, WAITING_EMAIL = range(4)
EDIT_NAME, EDIT_COMPANY, EDIT_PHONE, EDIT_EMAIL = range(4, 8)
ADMIN_SEND_MESSAGE, ADMIN_UPDATE_VENDOR = range(8, 10)
VENDOR_SEARCH = range(10, 11)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    db_user = db.add_user(user.id, user.username, user.first_name, user.last_name)
    db.log_user_action(user.id, 'start_command')
    
    if db_user.full_name and db_user.company:
        await show_main_menu(update, context)
        return ConversationHandler.END
    
    keyboard = [['üöÄ –°–¢–ê–†–¢']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        MESSAGES['welcome'],
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –°–¢–ê–†–¢"""
    if update.message.text == 'üöÄ –°–¢–ê–†–¢':
        await update.message.reply_text(
            MESSAGES['form_intro'],
            reply_markup=ReplyKeyboardRemove()
        )
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        return WAITING_NAME
    return ConversationHandler.END

async def waiting_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏"""
    context.user_data['full_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    return WAITING_COMPANY

async def waiting_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    context.user_data['company'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return WAITING_PHONE

async def waiting_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return WAITING_EMAIL

async def waiting_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ email –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    db.update_user_profile(
        user_id,
        full_name=context.user_data['full_name'],
        company=context.user_data['company'],
        phone=context.user_data['phone'],
        email=update.message.text
    )
    
    db.log_user_action(user_id, 'profile_completed')
    
    await update.message.reply_text(MESSAGES['form_complete'])
    await show_main_menu(update, context)
    
    return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        ['üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏', 'üîç –ü–æ–∏—Å–∫ –≤–µ–Ω–¥–æ—Ä–æ–≤'],
        ['üìö –ò–∑—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
        ['üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'],
        ['üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'main_menu_viewed')

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await show_main_menu(update, context)

async def handle_company_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–û –∫–æ–º–ø–∞–Ω–∏–∏'"""
    keyboard = [
        [InlineKeyboardButton("üìÑ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="product_portfolio")],
        [InlineKeyboardButton("üìã –ì–∞–π–¥–ª–∞–π–Ω", callback_data="guideline")],
        [InlineKeyboardButton("üé® –õ–æ–≥–æ—Ç–∏–ø—ã", callback_data="logos")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª:",
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'company_info_viewed')

async def handle_directions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–ò–∑—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'"""
    keyboard = []
    for i in range(0, len(DIRECTIONS), 2):
        row = []
        row.append(InlineKeyboardButton(DIRECTIONS[i], callback_data=f"direction_{DIRECTIONS[i]}"))
        if i + 1 < len(DIRECTIONS):
            row.append(InlineKeyboardButton(DIRECTIONS[i + 1], callback_data=f"direction_{DIRECTIONS[i + 1]}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'directions_viewed')

async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'"""
    keyboard = [
        [InlineKeyboardButton("üíæ –°–•–î", callback_data="support_storage")],
        [InlineKeyboardButton("üñ• –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data="support_servers")],
        [InlineKeyboardButton("üîí Fortinet", callback_data="support_fortinet")],
        [InlineKeyboardButton("üõ° Palo Alto Networks", callback_data="support_palo_alto")],
        [InlineKeyboardButton("üì¶ –°–∫–ª–∞–¥—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ NetApp", callback_data="support_netapp")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        MESSAGES['support_intro'],
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'support_viewed')

async def handle_marketing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'"""
    keyboard = [
        [InlineKeyboardButton("üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="marketing_presentation")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞", callback_data="marketing_contacts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'marketing_viewed')

async def handle_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'"""
    keyboard = []
    for i in range(0, len(DIRECTIONS), 2):
        row = []
        row.append(InlineKeyboardButton(DIRECTIONS[i], callback_data=f"request_{DIRECTIONS[i]}"))
        if i + 1 < len(DIRECTIONS):
            row.append(InlineKeyboardButton(DIRECTIONS[i + 1], callback_data=f"request_{DIRECTIONS[i + 1]}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        MESSAGES['request_intro'],
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'request_viewed')

async def start_vendor_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –≤–µ–Ω–¥–æ—Ä–∞"""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    db.log_user_action(update.effective_user.id, 'vendor_search_started')
    return VENDOR_SEARCH

async def search_vendor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –≤–µ–Ω–¥–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    vendor_name = update.message.text
    vendor = db.get_vendor(vendor_name)
    
    if vendor:
        await update.message.reply_text(
            vendor.to_card_text(),
            parse_mode=ParseMode.MARKDOWN
        )
        db.log_user_action(update.effective_user.id, 'vendor_found', vendor.name)
    else:
        await update.message.reply_text(
            f"–í–µ–Ω–¥–æ—Ä '{vendor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        db.log_user_action(update.effective_user.id, 'vendor_not_found', vendor_name)
    
    await show_main_menu(update, context)
    return ConversationHandler.END

async def handle_profile_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    keyboard = [
        [InlineKeyboardButton("üë§ –ò–º—è –∏ –§–∞–º–∏–ª–∏—è", callback_data="edit_name")],
        [InlineKeyboardButton("üè¢ –ö–æ–º–ø–∞–Ω–∏—è", callback_data="edit_company")],
        [InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton("üìß Email", callback_data="edit_email")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup
    )
    db.log_user_action(update.effective_user.id, 'profile_edit_viewed')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "back_to_menu":
        await query.message.delete()
        await show_main_menu_callback(query, context)
    
    elif data == "product_portfolio":
        await send_file(query, PRODUCT_PORTFOLIO_PATH, "–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        db.log_user_action(user_id, 'file_downloaded', 'product_portfolio')
    
    elif data == "guideline":
        await send_file(query, GUIDELINE_PATH, "–ì–∞–π–¥–ª–∞–π–Ω")
        db.log_user_action(user_id, 'file_downloaded', 'guideline')
    
    elif data == "logos":
        await query.edit_message_text(
            f"–õ–æ–≥–æ—Ç–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: {LOGOS_URL}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
        db.log_user_action(user_id, 'logos_viewed')
    
    elif data.startswith("direction_"):
        direction = data.replace("direction_", "")
        await show_vendors_by_direction(query, context, direction)
        db.log_user_action(user_id, 'direction_viewed', direction)
    
    elif data.startswith("vendor_"):
        vendor_name = data.replace("vendor_", "")
        vendor = db.get_vendor(vendor_name)
        if vendor:
            await query.edit_message_text(
                vendor.to_card_text(),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"direction_{vendor.direction}")
                ]])
            )
            db.log_user_action(user_id, 'vendor_card_viewed', vendor.name)
    
    elif data.startswith("request_"):
        direction = data.replace("request_", "")
        contact = MANAGERS_CONTACTS.get(direction, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await query.edit_message_text(
            f"**{direction}**\n\n{contact}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
        db.log_user_action(user_id, 'manager_contact_viewed', direction)
    
    elif data == "marketing_presentation":
        await send_file(query, MARKETING_PRESENTATION_PATH, "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è")
        db.log_user_action(user_id, 'file_downloaded', 'marketing_presentation')
    
    elif data == "marketing_contacts":
        await query.edit_message_text(
            MESSAGES['marketing_contacts'],
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
        db.log_user_action(user_id, 'marketing_contacts_viewed')
    
    elif data.startswith("support_"):
        support_type = data.replace("support_", "")
        await show_support_info(query, context, support_type)
        db.log_user_action(user_id, 'support_info_viewed', support_type)

async def show_main_menu_callback(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    keyboard = [
        ['üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏', 'üîç –ü–æ–∏—Å–∫ –≤–µ–Ω–¥–æ—Ä–æ–≤'],
        ['üìö –ò–∑—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
        ['üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'],
        ['üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

async def show_vendors_by_direction(query, context: ContextTypes.DEFAULT_TYPE, direction: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ–Ω–¥–æ—Ä–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    vendors = db.get_vendors_by_direction(direction)
    
    if not vendors:
        await query.edit_message_text(
            f"–ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{direction}' –≤–µ–Ω–¥–æ—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
        return
    
    text = f"**{direction}**\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ—à–µ–Ω–∏—è –≤–µ–Ω–¥–æ—Ä–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–µ–Ω–¥–æ—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n"
    
    keyboard = []
    for vendor in vendors:
        description = vendor.description[:50] + "..." if vendor.description and len(vendor.description) > 50 else vendor.description or ""
        text += f"‚Ä¢ **{vendor.name}** - {description}\n"
        keyboard.append([InlineKeyboardButton(vendor.name, callback_data=f"vendor_{vendor.name}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_support_info(query, context: ContextTypes.DEFAULT_TYPE, support_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    support_texts = {
        'storage': """**–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –°–•–î**

**–í–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –í—ã–µ–∑–¥ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É –∑–∞–∫–∞–∑—á–∏–∫–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–º–µ–Ω—É

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
üî¥ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 2 —á–∞—Å–∞)
–°–•–î –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ—Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω

üü° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 4 —á–∞—Å–∞)
–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é

üü¢ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 24 —á–∞—Å–∞)
–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏

üîµ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 48 —á–∞—Å–æ–≤)
–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏""",
        
        'servers': """**–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è**

**–í–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –í—ã–µ–∑–¥ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É –∑–∞–∫–∞–∑—á–∏–∫–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–º–µ–Ω—É

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
üî¥ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 2 —á–∞—Å–∞)
–°–µ—Ä–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ—Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

üü° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 4 —á–∞—Å–∞)
–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é

üü¢ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 24 —á–∞—Å–∞)
–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã""",
        
        'fortinet': """**–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ Fortinet**

**–í–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ 24x7 –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
üî¥ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 6 —á–∞—Å–æ–≤)
–ú–°–≠ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ—Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å

üü° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 24 —á–∞—Å–∞)
–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å

üü¢ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3** (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 72 —á–∞—Å–∞)
–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏""",
        
        'palo_alto': """**–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ Palo Alto Networks**

**–í–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π NGFW
‚Ä¢ –ó–∞–º–µ–Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π (RMA)
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ FAQ
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ü–û

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**
üî¥ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1** (< 1 —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Å–∞)
–ü–æ–ª–Ω–∞—è –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã

üü° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2** (< 4 —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤)
–ü—Ä–æ–±–ª–µ–º—ã –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã

üü¢ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3** (< 8 —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤)
–ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã

üîµ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4** (< 16 —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤)
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–º–æ—â—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏""",
        
        'netapp': """**–°–∫–ª–∞–¥—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ NetApp**

**1. –ì–∏–±—Ä–∏–¥–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (HDD)** - –¥–µ—à–µ–≤–ª–µ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ:
‚Ä¢ Entry level FAS 2750
‚Ä¢ Middle FAS 8300
‚Ä¢ Enterprise FAS 9000

**2. ALL FLASH FAS (SSD)** - –¥–æ—Ä–æ–∂–µ, –Ω–æ –±—ã—Å—Ç—Ä–µ–µ:
‚Ä¢ All flash –º–∞—Å—Å–∏–≤ –ê150
‚Ä¢ NVME All flash –º–∞—Å—Å–∏–≤ –ê250
‚Ä¢ All flash –º–∞—Å—Å–∏–≤ –ê400
‚Ä¢ All flash –º–∞—Å—Å–∏–≤ –ê700
‚Ä¢ NVME All flash –º–∞—Å—Å–∏–≤ –ê800
‚Ä¢ C800, C250

**3. All SAN Array** (–±–ª–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø):
‚Ä¢ ASA A400
‚Ä¢ ASA A700
‚Ä¢ ASA A150
‚Ä¢ ASA A250"""
    }
    
    text = support_texts.get(support_type, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]])
    )

async def send_file(query, file_path: str, file_description: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if os.path.exists(file_path):
            with open(file_path, 'rb') as file:
                await query.message.reply_document(
                    document=file,
                    caption=file_description
                )
        else:
            await query.edit_message_text(
                f"–§–∞–π–ª '{file_description}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
    except Exception as e:
        await query.edit_message_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == 'üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏':
        await handle_company_info(update, context)
    elif text == 'üîç –ü–æ–∏—Å–∫ –≤–µ–Ω–¥–æ—Ä–æ–≤':
        return await start_vendor_search(update, context)
    elif text == 'üìö –ò–∑—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è':
        await handle_directions(update, context)
    elif text == 'üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        await handle_support(update, context)
    elif text == 'üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥':
        await handle_marketing(update, context)
    elif text == 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å':
        await handle_request(update, context)
    elif text == 'üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É':
        await handle_profile_edit(update, context)
    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu"
        )
    
    return ConversationHandler.END

# =================== –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ===================

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    users = db.get_all_users()
    
    if not users:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    text = "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    for user in users[:20]: 
        text += f"**ID:** {user.user_id}\n"
        text += f"**–ò–º—è:** {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"**–ö–æ–º–ø–∞–Ω–∏—è:** {user.company or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"**Email:** {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user.registration_date.strftime('%d.%m.%Y') if user.registration_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    
    if len(users) > 20:
        text += f"\n... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    stats = db.get_user_stats()
    
    text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
    text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n\n"
    
    if stats['popular_actions']:
        text += "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é:**\n"
        for action, count in sorted(stats['popular_actions'].items(), key=lambda x: x[1], reverse=True)[:10]:
            text += f"‚Ä¢ {action}: {count}\n"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

async def admin_send_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ADMIN_SEND_MESSAGE

async def admin_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    message_text = update.message.text
    users = db.get_all_users()
    
    success_count = 0
    error_count = 0
    
    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    for user in users:
        try:
            await context.bot.send_message(
                chat_id=user.user_id,
                text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ Netwell:**\n\n{message_text}",
                parse_mode=ParseMode.MARKDOWN
            )
            success_count += 1
        except Exception as e:
            error_count += 1
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
    
    await update.message.reply_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚ùå –û—à–∏–±–æ–∫: {error_count}"
    )
    
    db.log_user_action(update.effective_user.id, 'admin_broadcast', f'sent to {success_count} users')
    return ConversationHandler.END

async def admin_update_vendor_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–Ω–¥–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ|–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç|–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ|–ì–æ–¥|–ü—Ä–æ–¥—É–∫—Ç—ã\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "NetApp|–°–•–î|–õ–∏–¥–µ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–∏—Å—Ç–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö|–í—ã—Å–æ–∫–∏–π|–°–®–ê|1992|FAS, AFF, ONTAP",
        reply_markup=ReplyKeyboardRemove()
    )
    return ADMIN_UPDATE_VENDOR

async def admin_update_vendor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–Ω–¥–æ—Ä–µ"""
    try:
        data_parts = update.message.text.split('|')
        
        if len(data_parts) < 3:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ú–∏–Ω–∏–º—É–º: –ù–∞–∑–≤–∞–Ω–∏–µ|–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ"
            )
            return ConversationHandler.END
        
        vendor_data = {
            'name': data_parts[0].strip(),
            'direction': data_parts[1].strip(),
            'description': data_parts[2].strip(),
            'priority': data_parts[3].strip() if len(data_parts) > 3 else None,
            'origin': data_parts[4].strip() if len(data_parts) > 4 else None,
            'founded_year': int(data_parts[5].strip()) if len(data_parts) > 5 and data_parts[5].strip().isdigit() else None,
            'key_products': data_parts[6].strip() if len(data_parts) > 6 else None,
        }
        
        vendor = db.add_vendor(**vendor_data)
        
        await update.message.reply_text(
            f"‚úÖ –í–µ–Ω–¥–æ—Ä '{vendor.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω!"
        )
        
        db.log_user_action(update.effective_user.id, 'admin_vendor_updated', vendor.name)
        
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ–Ω–¥–æ—Ä–∞: {str(e)}")
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_main_menu(update, context)
    return ConversationHandler.END

